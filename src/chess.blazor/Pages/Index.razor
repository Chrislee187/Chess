@page "/"

    <div class="container-fluid">
        <h1 class="display-4">Welcome</h1>
        <p>
            Welcome to the home-page of my chess "web-site".
        </p>
        <p>
            <em>
                NOTE: Although I can and have played chess on a regular basis in the past I'm currently not an "active" player and this site is not used for anything other than practice/self-improvement in the art of software development. As such the site are is often in a state of flux and subject to change at anytime. I consider it a massive <externala href="https://en.wikipedia.org/wiki/Kata_(programming)">"code kata"</externala> for the larger scope of full software development compared to "code-kata's" more traditional scope of a single small programming problem.
            </em>
        </p><p>
            <em>
                NOTE the 2nd: This site is developed using client-side <externala href="https://docs.microsoft.com/en-gb/aspnet/core/blazor/get-started?view=aspnetcore-3.0&tabs=visual-studio">Blazor</externala>, which runs C# in the browser under <externala href="https://webassembly.org/"> WebAssembly</externala>, whilst Blazor is no longer classed as "experimental" by Microsoft and they have committed to shipping it as a supported UI framework, it is currently still in it's beta/preview stages.
            </em>
        </p>
        <h2>Why Chess?</h2>
        <p>
            I chose chess because it is an existing, finite and well known "domain", simple to understand but with many complexities to implement and as such ideal to use as a sandbox for experimenting with many software development practices, ideas and implementations. This includes such things as; </p>
        <ul>
            <li>architecture and design approaches</li>
            <li>coding techniques, patterns, styles</li>
            <li>using different libraries, tooling, frameworks</li>
            <li>testing at different levels with different tools</li>
            <li>integration and deployment mechanisms</li>
            <li>performance analysis and optimisation through parallelisation and algorithm effiency improvements</li>
            <li>dealing with large amounts of data and large processing loads (I have almost 500,000 historical chess game files to use for validating the engine)</li>
        </ul>

        <p>
            The core of this effort is a <externala href="https://github.com/Chrislee187/Chess">chess "engine"</externala>, which supports;
            <ul>
                <li>maintaining the state of a chess board
                </li>
                <li>updating the board state with a valid move supplied in <externala href="https://en.wikipedia.org/wiki/Algebraic_notation_(chess)">Standard Algebraic Notation (SAN)</externala>.
                </li>
                <li>identifying all valid moves for the current board state
                </li>
                <li>determine the game state (check/checkmate etc.) of the current board state
                </li>
            </ul>
        </p>
        <p>
            With the engine as the base, further components are in-development or planned including;<br/>
            <h2>IN-DEVELOPMENT</h2>
            <ul>
                <li>
                    a simple webapi that uses a text based serialised representation of a board to transfer the board state over http and can be used to update board state from valid moves
                    <br /><externala href="http://chess-web-api.azurewebsites.net/swagger">See the swagger UI for it here</externala>
                    <br /><externala href="https://github.com/Chrislee187/Chess/tree/master/src/chess.webapi">Source code on github</externala>
                </li>
                <li>
                    A very simple web-page using handlebars and a little jQuery to use the above web-api allow a game of chess to be played on between two human players.
                    <br /><externala href="https://chess-web-api.azurewebsites.net/">See it here</externala>
                    <br /><externala href="https://github.com/Chrislee187/Chess/blob/master/src/chess.webapi/wwwroot/index.html">Source code on github</externala>"
                </li>
                <ul>
                    <li>
                        A simple Blazor client-side SPA that uses the webapi to as the back-end chess service to validate moves against.
                        <br /><a href="/blazorchess">Blazor Chess</a>
                        <br /><externala href="https://github.com/Chrislee187/Chess/tree/master/src/chess.blazor">Source code on github</externala>"
                    </li>
                </ul>
                <li>
                    <externala href="https://en.wikipedia.org/wiki/Portable_Game_Notation">PGN</externala> is a standard format/notation used to encode chess games. See <a href="/pgn/tools">PGN Tools</a>
                </li>
            </ul>
            <h2>PLANNED</h2>
            <ul>
                <li>Angular and React versions of the Blazor Chess SPA for comparison</li>
                <li>"AI" players, using the valid move lists generated by the chess.engine, create some "AI" players, currently only have one hacked in player, that just picks a random valid move. Concept of non-human players to be properly abstracted to support easy use of different AI players</li>
                <li>"AI" Tournament, ability for "AI" players to play against each other, lots of times, in large tournaments.
                <em>No real use for this other than an interesting test-bed for experiments with heavy loads/parallelisation/large datasets etc.</em>
                </li>
            </ul>

        </p>

        <p>
            The code for this site and all of the tools can be found on my Github <externala href="https://github.com/Chrislee187">https://github.com/Chrislee187</externala>
        </p>
    </div>