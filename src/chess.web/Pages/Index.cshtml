@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-left">
    <h1 class="display-4">Welcome</h1>
    <p>
        Welcome to the home-page of my chess "web-site".
    </p>
    <p>
        Please note, that although I can, have and do play chess on occasion I'm currently not an "active" player and this site is not used for anything other than practice/self-improvement in the art of software development and as such all the parts of the site are in flux and subject to change. I consider it a massive <a href="https://en.wikipedia.org/wiki/Kata_(programming)">"code kata"</a> for the larger scope of full software development compared to "code-kata's" more traditional scope of a single small problem.
    </p>
    <p>
        I chose chess because it is a fixed and well known "domain", simple to understand but with many complexities to implement and as such ideal to use as a sandbox for experimenting with such things as; coding techniques, libraries, tooling, UI frameworks, practices, processes, testing, integration and deployment mechanisms, architecture and design approaches and pretty much everything that goes along with the full <a href="https://en.wikipedia.org/wiki/Systems_development_life_cycle" target="_blank">SDLC</a> of a product.
    </p>
    <p>
        Many of the concepts I've been playing around with for years, but recently realising I had some free Azure credits with my MSDN subs. prompted me to start tidying, and integrating, disparate bits of code from various hacked spikes, in to something more concrete to prove out ideas, concepts and extend the "kata's" coverage to include real deployments.
    </p>

    <p>
        The core of this suite is a chess "engine", which can;
        <ul>
            <li>
                maintain the state of a chess board
            </li>
            <li>
                show all the valid moves for the current board state
            </li>
            <li>
                determine whether a king is in check or has been checkmate
            </li>
            <li>
                play (valid) moves using both simple co-ordinate based input such as "d2d4" as well as the slighter harder to process but pretty standard <a href="https://en.wikipedia.org/wiki/Algebraic_notation_(chess)" target="_blank">Standard Algebraic Notation (SAN)</a>.
            </li>
        </ul>
    </p>
    <p>
        Using this engine I have developed some other tools including;
        <ul>
            <li>
                a simple webapi that uses a text based serialised representation of a board to transfer the state simply over the web that can be used to generate valid movelists for the board. <a href="http://chess-web-api.azurewebsites.net/swagger" target="_blank">See the swagger UI for it here</a>
            </li>
            <li>
                A very simple web-page using handlebars and a little jQuery to use the above web-api allow a game of chess to be played on between two human players.<a href="https://chess-web-api.azurewebsites.net/" target="_blank">See it here</a>
            </li>
            <li>
                PGN Parsing tools. <a href="https://en.wikipedia.org/wiki/Portable_Game_Notation" target="_blank">PGN</a> is a standard format/notation used to encode chess games. These currently include.
                <ul>
                    <li>
                        A PgnReader to read PGN text files and parse in to .NET objects
                    </li>
                    <li>
                        A simple web-page using the Razor Pages patterns to allow conversion of PGN text to a JSON compatible format.
                    </li>
                    <li>
                        A command line PGN to JSON tool for batch conversion needs.
                    </li>
                </ul>
            </li>
        </ul>
    </p>
    <p>
        Other tools/utilities and ideas in various stages of thought/development include;
        <ul>
            <li>
                PGN command line tools to sort/filter/search PGN files
            </li>
            <li>
                Chess Game Library that PGN files can be imported in to for further processing.
            </li>
            <li>
                Chess players, reusable component to display replay of a chess game
            </li>
            <li>
                Tournaments between the "AI" players
            </li>
        </ul>
    </p>

    <p>
        The code for this site and all of the tools can be found on Github at <a href="https://github.com/Chrislee187/Chess">https://github.com/Chrislee187/Chess</a>
    </p>
</div>
